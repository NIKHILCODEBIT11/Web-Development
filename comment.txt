(1) To write a comment in html :-

correct syntax is :-

<!-- Or <hr /> or <hr> -->

✅ Rule for HTML comments:
Must start with <!--

Must end with -->

No space between <! and --, or between -- and >


(2) Importance of indendation in html :-

There is no importance of indendation in html 
but it can be given for any human to understand the code

(3) Importance of <ul> or <ol> before using <li> :-

It is not a problem to use only <li> without wrapping it in either <ul> or <ol>, but it is considered a good practice to wrap them.
But if not done than still it will come as bullet points wherever i used <li> without any wrap just proper indendation or spacing would be missing for the element to be headed before <li>.



########### Important :-

<a href="#contact">Go to Contact</a>
...
<h2 id="contact">Contact Section</h2>

<a href="https://example.com" title="Go to Example Website">Hover over me</a>
The title attribute is used to provide extra information about the link. When the user hovers the mouse over the link, a small tooltip box appears showing the text inside the title.


The draggable attribute is a Boolean attribute in HTML that specifies whether an element can be dragged using the mouse.
You can use it with <a> tags to allow or prevent the user from dragging the link.
<a href="https://example.com" draggable="true">Drag This Link</a>
📌 You can click and drag this link to, for example, the bookmarks bar or another browser tab.

<a href="https://example.com" draggable="false">Can't Drag This</a>
📌 This link cannot be dragged—even though normally links are draggable by default.



### INLINE css :-
-----> It goes in the same line as the particulare html element
------> I have to use this method inside <body>
------> <tag style="css" />


### INTERNAL css :-
------> I have to use this inside <head>
------> Inside <style> </style>
******** Style is a global attribute available to all tags <h1> to <h6> <img> <br /> etc 
✅ Internal CSS — Where Should It Be Placed?
In HTML, internal CSS should always be placed inside a <style> tag, and that tag must be inside the <head> section of the HTML document.



### External css :-
---> I have to use this by making a file with extesnion css and then linking it using <link /> in main index.html
----> <link href="style.css" />
✅ Yes — You can relate (connect) an external CSS file to your main HTML file using only and only the <link /> tag inside the <head>.


CSS selector :-  It is the part outside the css code on which the css styling is applied
#######    DIFFERENT SELECTORS :-   (5.3)

( 1 )  Element selector :-   It selects a particular html element and performs the mentioned css whenever that element appears in the main code

index.html :-
<h2>Red</h2>
<h2>Green</h2>
<h3>hi</h3>

style.css :-
h2{         This is the element selector (h2)
    color:red;
}

( 2 ) Class selector :- It requires the special symbol "dot" ( . ) and after . with NO SPACES immediately the name of the class is written after that the css code is written inside the curly braces

What is class ????
--------> CLASS is like an attribute that can be added to any html element and that means lets group that particular element in the class, not all the instances of that html element, but only that html element to which class attribute is added

<h2 class="red-text">Red</h2>
<h2>Green</h2>
<h2>Blue</h2>
<p class="red-text">Paragraph</p>

style.css :-
.red-text{
    color:red;
}

****** Only changes in Red and Paragraph as class attribute is rpesent there only.


( 3 ) ID SELECTOR :- It is same as CLASS SELECTOR, the only difference is that it starts with "#" and 

            class selector can be applied to more than one elements in a html file.

            id selector can be applied to only and only one element in a html file. It is unique the name as defined in style.css can be used by only and only one element in a html file

<h2 id="main">Red</h2>      "main" can be used only once
<h2>Green</h2>
<h2>Blue</h2>

style.css :-

#main{          since, it is an id selector, so it can be used only once
    color:red;
}


( 4 )   ATTRIBUTE SELECTOR :-  An attribute selector in CSS is used to select and style HTML elements based on the presence or value of a specific attribute.


<p draggable="true">Drag me</p>
<p draggable="false">Dont drag me</P>
<p draggable="false">Dont drag me</p>


style.css :-

p[draggable="false"]{
    color:red;
}


********* Here, Dont drag me will be in red 

In a given html tag like "h1" we can add many attributes like "id=" "class=" "draggable=" "src=" "href=" "alt=" 
so,bt attribute selector, we can select tag that are having the particular attributes as mentioned in style.css


Types of attribute selectors :-


🔹 Syntax:
css

element[attribute] {
  /* styles */
}
🔹 Examples:
Select elements with a specific attribute (regardless of value):

(1) css :-

input[required] {
  border: 2px solid red;
}
🔸 This selects all <input> elements that have the required attribute.

Select elements with a specific attribute value:

(2) css :-


a[target="_blank"] {
  color: green;
}
🔸 This targets only <a> tags where target="_blank" (links that open in new tabs).

Attribute value starts with a specific string (^=):

(3) css :-


a[href^="https"] {
  color: blue;
}
🔸 Selects all links where the href starts with "https".

Attribute value ends with a specific string ($=):

(4) css :-

img[src$=".jpg"] {
  border-radius: 10px;
}
🔸 Targets all images whose src ends with .jpg.

Attribute value contains a specific string (*=):

(5) css :-

div[class*="header"] {
  background-color: lightgray;
}
🔸 Selects all <div> elements where the class contains the word “header” anywhere in it.


( 5 ) UNIVERSAL SELECTOR :- It contains only " * " , which simply means "SELECT ALL" WHERE "STYLESHEET" IS ACTIVE



########### CSS PROPERTIES :-


(1) FONT SIZE :-


-----> 1px :-  It is equivalent to a square of side length 1/96th inch

-----> 1pt :-  It is equivalent to a square of side length 1/72nd inch (SLIGHTLY GREATER THAN 1px)

-----> 1em :-  It is equivalent to the size of 100% OF THE PARENT

-----> 1rem :-  It is equivalent to the size of 100% of the root (HTML)



(2) FONT WEIGHT :-


-----> font-weight is a CSS property that controls how bold or light text appears on a webpage.

-----> It cane be represented as :-


( i )  KEYWORDS :-


normal :-  DEFAULT WEIGHT (USUALLY 400)

bold :-  BOLD TEXT (USUALLY 700)


( ii )  RELATIVE TO PARENT :-


lighter :-  lighter than the parent ( AT EACH TIME IT DECREASES BOLD BY 100 )

bolder :-  bolder than the parent  ( AT EACH TIME IT INCREASES BY 100 )


( iii )   100-900 :-


100 :-  MAXIMUM LIGHT 

900 :-  MAXIMUM BOLD



( 2 )   FONT FAMILY :-



🌟 What is Font Family in CSS?
In CSS, the font-family property is used to set the typeface (style of text) for text content on a web page.


Syntax :-


selector {
  font-family: "Font Name", fallback;
}


🧠 How It Works:
You provide a list of fonts (called a "font stack") in order of preference.

The browser will try to use the first font.

If it’s not available, it moves to the next, and so on.

The last option is usually a generic family like serif, sans-serif, or monospace.




✅ Example:
css

body {
  font-family: "Arial", "Helvetica", sans-serif;
}


This means:

Use Arial if available.

If not, use Helvetica.

If neither are available, use any sans-serif font.



###############################    THE BOX MODEL :-

---> Each element in a website is enclosed in a box
we can change height and width by 

height:100px;
weight:100px;

or even by % :-
width=100%  ----> This means width will cover 100% of the webpage


(1)     BORDER :-   We can also set border in a given box

----> Generally, it takes 3 parameters

SYNTAX :-

border : thickness style color;

thickness :-  in terms of px
style :- SOLID or DASHED
color :- Color of the border

********* EVEN THOUGH I MAKE BORDER VERY THICK, EVEN THEN IT WON'T CHANGE THE HEIGHT AND WIDTH OF THE BOX AS MENTIONED IN CODE.
SO, We can conclude that based on the thickness of the border it moves outside rather than moving inside.


###### MODIFYING BORDER WITH MORE SPECIFIC RULES :-


(i)

border:30px solid black;
  border-top: 0px;


The above code means make border of rhickness 30px solid style and color black but make the top border as 0px.

(ii)   border-width can take a maximum of 4 values. It can also take only 2 values 

where 1 and 3 (top and bottom) will be assigned the thickness of 1st parameter and 2 and 4(both sides) will be assigned the thickness of 2nd parameter


border:30px solid black;
border-width:0px 10px 20px 30px;



############## WHAT IS PADDING ?????

Padding in CSS is the space between the content of an element and its border. Think of it like the "inner space" inside a box.


+-----------------------------+
|         Margin             |   ← Outside space
|  +----------------------+  |
|  |      Border          |  |   ← Border
|  |  +----------------+  |  |
|  |  |   Padding      |  |  |   ← Inner space
|  |  | +------------+ |  |  |
|  |  | |  Content   | |  |  |   ← Actual text/image/etc.
|  |  | +------------+ |  |  |
|  |  +----------------+  |  |
|  +----------------------+  |
+-----------------------------+


so, if :-

padding:20px;

Then it will push the borders 20px from all 4 sides from the box of content, still the height and width of the content box remails same.

############ WHAT IS MARGIN ????

------> It is the space between the border and the next box of content in the webpage.

-------> In CSS, margin is the space outside the border of an HTML element. It creates space between the element and its neighbors (other elements).


                ┌───────────────────────────────┐
                │           Margin              │   ← margin (space outside the border)
                │     (space around border)     │
                │   ┌───────────────────────┐   │
                │   │       Border          │   │   ← border
                │   │  ┌─────────────────┐  │   │
                │   │  │     Padding     │  │   │   ← padding
                │   │  │  ┌───────────┐  │  │   │
                │   │  │  │ Content   │  │  │   │   ← content
                │   │  │  └───────────┘  │  │   │
                │   │  └─────────────────┘  │   │
                │   └───────────────────────┘   │
                └───────────────────────────────┘


************** JUST LIKE border-width, PADDING AND MARGIN ALSO CAN TAKE UPTO 
4 PARAMETERS AND IF NOT THEY CAN TAKE 2 PARAMETERS WITH 1ST PARAMETER OF (1 AND 3)
AND 2ND PARAMETER OF (2 AND 4) OR JUST 1 PARAMETER THAT WILL BE CONSIDERED FOR 
ALL THE SIDES.



********* WE CAN EVEN CREATE OUR OWN ARTIFICIAL BOXES, WHICH WILL BE 
VERY USEFUL WHEN WE WANT TO GROUP DIFFERENT TYPES OF CONTENTS (LIKE TEXT AND IMAGE)
IN A SINGLE BOX.

Like adding caption to any image ------> It can be done by " CONTENT DIVISION ELEMENT "

-----> <div> is simply a container which is invisible (if not applied css to 
visualize) which is simply used for containing elements.


########################## VERY VERY IMPORTANT :-


CASCADING IN CSS :-


The Cascade in CSS is the set of rules the browser follows to determine which CSS rule takes priority when multiple rules target the same element.


--------> There are 4 different types tp resolve rules conflict :-


(i) Position :-

-----> It resolves the conflict by looking upto the position the change is to be made.

Ex :-

li{
  color: red;     -----------> 1ST POSITION
  color: blue;  ( It is preffered as it is in the last position )   -----------> 2ND POSITION
}


Based  on position :-

2 > 1


(ii) Specificity :-

-----> It resolves the conflict by looking the specific selector in css.

ORDER :-

ID > ATTRIBUTE > CLASS > ELEMENT


EX :-

li{color: blue;}                    (It is preffered forth)
.first-class{color: red;}           (It is preffered third)
li{draggable} {color: purple;}      (It is preffered second)
#first-id{color: orange;}            (It is preffered first)


(iii) TYPE :-


INLINE CSS > INTERNAL CSS > EXTERNAL CSS


<link rel="stylesheet" href="./style.css"/>
<style> </style>
<h1 style="">hello</h1>


(iv) IMPORTANCE :-


------> It is a keyword which can be used to make any element PRIORITIZE no matter it is preffered by (position or specificity or type).
simply write "!important" at last of that element with a space gap.

EX :-


color: red;
color: green !important;



*********** OUT OF ALL 4 MENTIONED RULE CONFLICT RESOLVING TECHNIQUE THE ORDER AMONG THEM IS :-


IMPORTANCE > TYPE > SPECIFICITY > Position



8.0    css display :-


-----> When elements are inline, they behave like words in a sentence.



IMPORTANT CONCEPT ON UNDERSTANDING WHEN GAP IS VISIBLE AND WHEN NOT :-----


🔍 What You’ll See
Test Case	                                      What You See	                                                        Why it Happens
Inline — No space between tags	                AB (no gap)	                                                No whitespace node between them
Inline — Space between tags	                    A B (with gap)	                                            Space becomes visible like between text
Inline-block — No space	                      Two boxes touching	                                      No gap; no space node between elements
Inline-block — Space between tags	           Two boxes with a visible gap	                              That space between tags shows up between boxes
Inline-block — Newline between	            Two boxes with a visible gap (like above)	                      Newline is treated like a space



8.1  ------>    using "float" 


explaination for commented " clear:left " :-

📐 Layout Step-by-Step
.cat floats left
➤ It starts on the top-left.

.dog floats right
➤ It starts on the top-right.

footer wants to render:

It sees .cat is floated left.

Because of clear: left, it must go below the bottom of .cat.

But .dog is on the right and NOT blocking it.

So the footer places itself in the middle, between the floats.

✅ This is valid: nothing is floated to the left of it anymore.



################# For creating responsive websites :-

(i) MEDIA QUERIES
(ii) CSS GRID
(iii) CSS FLEXBOX
(iv) EXTERNAL FRAMEWORK { eg BOOTSTRAP }



8.3 MEDIA QUERIES :-

BONUS :-

You can use media queries in CSS to detect the screen orientation — whether it's:

Portrait (tall and narrow, like a phone held upright)

Landscape (wide and short, like a laptop or phone turned sideways)


example :-

@media (orientation: portrait) {
  body {
    background-color: peachpuff;
  }
}

@media (orientation: landscape) {
  body {
    background-color: lightblue;
  }
}


If a child element has position: absolute, it will position itself relative to the top-left corner of the nearest ancestor that is positioned (relative, absolute, or fixed).



IN FLEXBOX :-

.container {
      display: flex;
      gap:10px;
}

"CONTAINER" IS REQUIRED BY EVERY "PARENT" IN FLEXBOX.



                              order :-          This property is applied to CHILD NOT PARENT.

The order property lets you rearrange the visual order of flex items without changing the HTML structure.


📌 Default Behavior:
By default, all items have:

order: 0;
So they appear in the order they are written in the HTML.


✨ How to use order
You can set a positive or negative number to change the position.


.item1 {
  order: 3;
}
.item2 {
  order: 1;
}
.item3 {
  order: -1;
}


👆 In this case, the visual order will be:

👉 .item3, then .item2, then .item1

Because:

.item3 → order -1

.item2 → order 1

.item1 → order 3



                                  flex-wrap :-      This property is applied to PARENT NOT child

By default, flex items are forced to stay on one line, even if they overflow.
flex-wrap tells the container whether and how to wrap items when there isn’t enough space.


| Value              | Description               | Behavior                                          |
| ------------------ | ------------------------- | ------------------------------------------------- |
| `nowrap` (default) | ❌ No wrapping             | All items stay on one line; overflow or shrink    |
| `wrap`             | ✅ Wrap to next line       | Items go to a **new row** (or column) when needed |
| `wrap-reverse`     | 🔁 Reverse wrap direction | Items wrap **opposite** to the main axis          |



💡 Visual Example: flex-direction: row

With flex-wrap: nowrap;

| item1 item2 item3 item4 item5 item6 |
    (👆 all in one line — even if they overflow)


With flex-wrap: wrap;

| item1 item2 item3 |
| item4 item5 item6 |
    (👆 wraps to next line when no more space)

With wrap-reverse

| item4 item5 item6 |
| item1 item2 item3 |
    (👆 same as wrap but second row is placed *above* the first)

wrap-reverse is the property applied to PARENT not CHILD 



                                      justify-content :-   It is a property applied to PARENT not CHILD { MAIN-AXIS }

The justify-content property is used in flexbox or grid layouts to align items horizontally (along the main axis) inside a container.

SYNTAX :-


.container {
  display: flex; /* or display: grid; */
  justify-content: <value>;
}


✅ Common Values and What They Do:



| Value            | What it does                                                              |
| ---------------- | ------------------------------------------------------------------------- |
| `flex-start`     | Aligns items to the **start** of the main axis (left by default).         |
| `flex-end`       | Aligns items to the **end** of the main axis (right by default).          |
| `center`         | **Centers** items along the main axis.                                    |
| `space-between`  | **Evenly distributes** items; first at start, last at end.                |
| `space-around`   | Like `space-between`, but adds **space on both sides** of each item.      |
| `space-evenly`   | **Equal space** between **all items and edges**.                          |
| `start` / `end`  | Similar to `flex-start` / `flex-end`, but respects **writing direction**. |
| `left` / `right` | Specifically align to left or right (used with certain layout modes).     |


🧠 Tip:
It only works if the container has display: flex or display: grid.

If you want vertical alignment, use align-items (for single-line) or align-content (for multi-line).


DIFFERENCE BETWEEN    "space-between"     "space-around"     "space-evenly"       :-


✅ 1. space-between :-

Space is only between the items.
No space at the start or end of the container.


|Item1    Item2    Item3|


📌 Notice:

Item1 touches the left edge.

Item3 touches the right edge.

Even space between only the items.



✅ 2. space-around
Equal space on both sides of each item.

That means the space between items is double the space at the edges.


|  Item1   Item2   Item3  |

📌 Notice:

There's some space on the left and right of the container.

The space between items looks bigger because each item gets space on both sides.



✅ 3. space-evenly
Equal space everywhere – before the first item, between items, and after the last item.

|   Item1   Item2   Item3   |

📌 Notice:

Space between all items and edges is exactly the same.



| Property        | Edge Space | Between Items | Use Case                                |
| --------------- | ---------- | ------------- | --------------------------------------- |
| `space-between` | ❌ No       | ✅ Equal       | Spread items fully across container     |
| `space-around`  | ✅ Half     | ✅ Double edge | Items need padding from container edges |
| `space-evenly`  | ✅ Equal    | ✅ Equal       | Perfect symmetry everywhere             |





DIFFERENCE BETWEEN      start/end      AND        left/right :-



| Property | Affected by writing direction? | Meaning in LTR | Meaning in RTL | Use it when...                     |
| -------- | ------------------------------ | -------------- | -------------- | ---------------------------------- |
| `start`  | ✅ Yes                          | Left           | Right          | You want layout to adapt to locale |
| `end`    | ✅ Yes                          | Right          | Left           | Same as above                      |
| `left`   | ❌ No                           | Left           | Left           | Fixed left alignment needed        |
| `right`  | ❌ No                           | Right          | Right          | Fixed right alignment needed       |





                                    align-items :-  This property is applied to PARENT and NOT CHILD { CROSS-AXIS }

--------------> IT WORKS ONLY FOR THE "flex-wrap : nowrap" AND FOR "flex-wrap : wrap" THE PROPERTY "align-content" is being used. 

✅ align-items in CSS (Flexbox & Grid)
The align-items property is used to align items vertically along the cross axis in a flex or grid container.



🧭 Quick Orientation Recap:
justify-content → aligns items on the main axis (usually horizontal in flex-direction: row).

align-items → aligns items on the cross axis (usually vertical in flex-direction: row).


.

🧱 Syntax:-

.container {
  display: flex;
  align-items: <value>;
}


✅ Common Values:-


| Value                 | Description                                                               |
| --------------------- | ------------------------------------------------------------------------- |
| `stretch` *(default)* | Items **stretch** to fill the container vertically (if no height is set). |
| `flex-start`          | Items are aligned to the **top** of the container.                        |
| `flex-end`            | Items are aligned to the **bottom** of the container.                     |
| `center`              | Items are **vertically centered**.                                        |
| `baseline`            | Items are aligned based on their **text baseline**.                       |


************** For getting result for "align-items" i must give height to the container (ON THE OTHER HAND "stretch" COULD WORK WITHOUT ANY height GIVEN)


                        align-self :-  This propert is applied to CHILD and NOT PARENT { CROSS-AXIS }



✅ align-self in CSS
The align-self property is used to override the align-items value for a specific child inside a flex or grid container.

📌 While align-items is set on the parent, align-self is set on the child to control its own vertical (cross-axis) alignment.

It only works when the parent has display: flex or display: grid.



🔹 Common Values:



| Value        | Description                                                           |
| ------------ | --------------------------------------------------------------------- |
| `auto`       | Inherits the value from the parent’s `align-items`.                   |
| `flex-start` | Align this item to the **top** (or start of the cross-axis).          |
| `flex-end`   | Align this item to the **bottom** (or end of the cross-axis).         |
| `center`     | Vertically **center** this item.                                      |
| `baseline`   | Align item based on **text baseline**.                                |
| `stretch`    | Stretch to fill container (default, unless height is explicitly set). |



🎯 Example:


<div class="container">
  <div>Item 1</div>
  <div class="special">Item 2</div>
  <div>Item 3</div>
</div>


.container {
  display: flex;
  align-items: flex-start;
  height: 150px;
  border: 2px solid black;
}

.special {
  align-self: flex-end;
}



🔍 Result:

All items go to the top (because of align-items: flex-start).

But Item 2 goes to the bottom (because of align-self: flex-end on that child).


🧠 Summary:-



| Property      | Applied to | Affects             | Use for                     |
| ------------- | ---------- | ------------------- | --------------------------- |
| `align-items` | Parent     | All children        | Global vertical alignment   |
| `align-self`  | Child      | That specific child | Override vertical alignment |




                                align-content :-    It is a propert of PARENT and NOT CHILD { CROSS-AXIS }

------------> THIS IS USED FOR "flex-wrap : wrap" AND IT DOES NOT WORK WHEN "flex-wrap : nowrap"

align-content IS SIMILAR TO align-items , 


                                  BUT align-content WORKS ONLY WHEN flex-wrap IS SET TO Wrap  {{{{  USED ONLY WHEN MULTIPLE ROWS OR COLUMNS AREE PRESENT }}}}



✅ align-content in CSS
align-content is a layout property used in Flexbox (with wrapping) and CSS Grid to control spacing between multiple rows or columns along the cross axis.



🔧 When to Use align-content?
When your container has multiple lines of content, like:

Flexbox with flex-wrap: wrap

Multi-row Grid

align-content only works when there’s extra space in the container’s cross axis.


📦 Example Setup (Flexbox):


<div class="container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
</div>


.container {
  display: flex;
  flex-wrap: wrap;
  height: 300px;
  align-content: space-between;
}
.container div {
  flex: 0 0 30%; /* Each item takes 30% width */
  height: 50px;
  background: salmon;
  margin: 5px;
}


🎯 What Does align-content Do?


| Value               | What it Does                                                    |
| ------------------- | --------------------------------------------------------------- |
| `flex-start`        | Rows are packed to the **top**.                                 |
| `flex-end`          | Rows are packed to the **bottom**.                              |
| `center`            | Rows are **centered vertically** in the container.              |
| `space-between`     | Equal vertical **space between** each row (none at top/bottom). |
| `space-around`      | Equal space **above & below each row**. Edges get half-space.   |
| `space-evenly`      | Equal space **between all rows and edges**.                     |
| `stretch` (default) | Rows stretch to fill the container (if no height set on items). |



                              Difference between align-items and align-content :- 



| Property            | Applies To                 | Works When                             | Aligns What                         |
| ------------------- | -------------------------- | -------------------------------------- | ----------------------------------- |
| **`align-items`**   | All **individual items**   | Always                                 | Each item inside the container      |
| **`align-content`** | The **group of item rows** | Only with multiple lines (`flex-wrap`) | The space **between rows** of items |



| You have...                        | Use this...     |
| ---------------------------------- | --------------- |
| A **single line**                  | `align-items`   |
| **Multiple lines** (items wrapped) | `align-content` |






                                        🔹 flex-direction — This property is applied to PARENT and NOT CHILD { DEFINES THE MAIN AXIS IN FLEXBOX }

It controls which direction the flex items are laid out in a flex container.


Syntax :-

.container {
  display: flex;
  flex-direction: row | row-reverse | column | column-reverse;
}


🔸 Values & Meaning:


| Value            | Main Axis Direction           | Cross Axis              |
| ---------------- | ----------------------------- | ----------------------- |
| `row` (default)  | **Left → Right** (horizontal) | Top ↕ Bottom (vertical) |
| `row-reverse`    | **Right → Left**              | Top ↕ Bottom            |
| `column`         | **Top → Bottom** (vertical)   | Left ↔ Right            |
| `column-reverse` | **Bottom → Top**              | Left ↔ Right            |



🔹 Visual Explanation (for row):


Main Axis  →→→→→
[ Item1 ][ Item2 ][ Item3 ]

Cross Axis
   ↓




🔹 Visual for column:


Main Axis
   ↓
[ Item1 ]
[ Item2 ]
[ Item3 ]
→ Cross Axis



🔍 Quick Tip:


| You want this...                | Use this value                    |
| ------------------------------- | --------------------------------- |
| Items side by side (horizontal) | `flex-direction: row`             |
| Items stacked vertically        | `flex-direction: column`          |
| Reverse item order (LTR → RTL)  | `row-reverse` or `column-reverse` |




                      ✅ What is flex-flow :-


                                     flex-flow is a shorthand for:
                                        
                                        flex-direction + flex-wrap


So instead of writing :-


flex-direction: row;
flex-wrap: wrap;


You can simply write :-


flex-flow: row wrap;        { or flex-flow:wrap row }


🔹 Syntax:


flex-flow: <flex-direction> <flex-wrap>;


flex-direction: row | row-reverse | column | column-reverse

flex-wrap: nowrap | wrap | wrap-reverse



🧠 Examples:


| Long Form                                                    | Short Form                             |
| ------------------------------------------------------------ | -------------------------------------- |
| `flex-direction: row;`<br>`flex-wrap: wrap;`                 | `flex-flow: row wrap;`                 |
| `flex-direction: column;`<br>`flex-wrap: nowrap;`            | `flex-flow: column nowrap;`            |
| `flex-direction: row-reverse;`<br>`flex-wrap: wrap-reverse;` | `flex-flow: row-reverse wrap-reverse;` |


✨ Default Value:


flex-flow: row nowrap;

So if you don’t set it, items are placed in a row and do not wrap.



################## Flex-sizing :-


it follows the priority list as follows :-


                            CONTENT-WIDTH   <   WIDTH   <   FLEX-BASIS   <   MIN-WIDTH/MAX-WIDTH



✅ Detailed Explanation:


flex-basis :-
This is the primary value used by Flexbox to determine the initial size of the item.
If set, it overrides width and content size.
IT IS USED TO SE ROW SIZE OF EACH ELEMENT IN A ROW-SET FLEXBOX
IT IS USED TO SET HEIGHT OF EACH ELEMENT IN A COLUMN-SET FLEXBOX

width :-
Used only if flex-basis is auto.
Acts as a fallback.

content-size :-
The intrinsic size based on content.
Used only if both flex-basis and width are auto.

min-width / max-width :-
These act as constraints and can override the size decided by the above logic.
For example, if the computed size (via flex-basis) is 500px but max-width: 300px, then final size becomes 300px.



******** IF min-width/max-width is not mentioned then it is going to look up for flex-basis and even if flex-basis is not given then
it looks for width(in case of row set flexbox OR height in case of columnb-set flexbox) and even if that is not set then it looks for content-width.


CONTENT-WIDTH :-      { LEAST PRIORITY }


🔍 What is Content Width in Flexbox?
Content width (also called intrinsic width) is the natural size of an element based on its content, without any explicit width, 
flex-basis, or constraints.

EX :-

Like in text :-

                                    APP BREWERY
                                    <--------->     --------->      Content-width



MIN-WIDTH :-


min-width sets the minimum width an element is allowed to shrink to, even if the content or Flexbox tries to make it smaller.




Ex :-               It depends on the biggest word of any paragraph


                                      The best 
                                      programming
                                      in the 
                                      WORLD
                                      <--------->       -------->             Min-width






MAX-WIDTH :-


It looks for the maximum possible width of the text or paragraph with no part of text written below

EX :-                             


                                            THE BEST PROGRAMMING IN THE WORLD
                                            <------------------------------->     ----------->         Max-
                                            


################## CONTROVERSY :-


If MAX-WIDTH < FLEX-BASIS :-

          MAX-WIDTH IS PREFFERRED

if FLEX-BASIS < MAX-WIDTH :-

          FLEX-BASIS IS preffered



🔷 1. flex-grow — Grow to fill available space

It tells Flexbox how much a flex item should grow relative to others when there’s extra space in the container.


✅ Syntax:

flex-grow: 1; /* Can be 0, 1, 2, 3, etc. */



⚙️ Behavior:
If all items have flex-grow: 0, no item will grow.

If one item has flex-grow: 1 and another has flex-grow: 2, the second one gets twice as much of the remaining space.

It only works if there’s extra space.

🔍 Example:

.item1 { flex-grow: 1; }
.item2 { flex-grow: 2; }
➡ Total remaining space: 300px
➡ .item1 gets 100px
➡ .item2 gets 200px




🔻 2. flex-shrink — Shrink when space is tight

It tells Flexbox how much an item should shrink relative to others when there’s not enough space.

✅ Syntax:

flex-shrink: 1; /* Default is 1 */


⚙️ Behavior:

If flex-shrink: 0, item won’t shrink at all.

Higher flex-shrink = shrinks more when needed.

Applies only when content overflows container.

🔍 Example:

.item1 { flex-shrink: 1; }
.item2 { flex-shrink: 3; }
➡ When there’s a shortage of space:
.item2 will shrink 3x more than .item1

✅ Combine with flex-basis:

.item {
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: 200px;
}

This means:

Start at 200px

Grow if needed

Shrink if needed

💡 Shorthand:

flex: 1 1 200px;  /* grow shrink basis */
Want a real layout to see grow/shrink live?





herahaven
secretdesires.ai

#include<stdio.h>
inline c++ added to the css styling alongwith javascript and html
and running the errands over the 
period of time regarding the programming